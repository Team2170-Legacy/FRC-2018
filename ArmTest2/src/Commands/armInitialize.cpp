// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "armInitialize.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

armInitialize::armInitialize(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void armInitialize::Initialize() {
	bool prevOpticalFlag = Robot::arm->readArmOpticalFlagSensor();
	if (prevOpticalFlag == true) {		// If optical flag reads light
		bool currentOpticalFlag = Robot::arm->readArmOpticalFlagSensor();
		while (currentOpticalFlag != false) {
			Robot::arm->setArmMotorSpeed(100);
			currentOpticalFlag = Robot::arm->readArmOpticalFlagSensor();
		}
		Robot::arm->setArmMotorSpeed(0);
		Robot::arm->resetArmEncoder();
	}
	else {								// If optical flag reads dark
		bool currentOpticalFlag = Robot::arm->readArmOpticalFlagSensor();
		while (currentOpticalFlag != true) {
			Robot::arm->setArmMotorSpeed(-100);
			currentOpticalFlag = Robot::arm->readArmOpticalFlagSensor();
		}
		Robot::arm->setArmMotorSpeed(0);
		Robot::arm->resetArmEncoder();
	}
}

// Called repeatedly when this Command is scheduled to run
void armInitialize::Execute() {

}

// Make this return true when this Command no longer needs to run execute()
bool armInitialize::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void armInitialize::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void armInitialize::Interrupted() {

}
