// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ArmPickup.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ArmPickup::ArmPickup(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::arm.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ArmPickup::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void ArmPickup::Execute() {
	// NOTE: This command only move the arm down to position. No intake motors are being used

	// Hit front limit Switch
	bool limitSwitchFront = Robot::arm->readLimitSwitchFront();
	while (limitSwitchFront == false) {
		Robot::arm->setArmMotorSpeed(100);
	}
	Robot::arm->stopArmMotor();


	double kPGain = 0.3;


	// If limit switches can't be used
	// Calculate the number of encoder counts that need to be traveled to pick position (right before limit switch)
	// Then set motots to travel that encoder count duration
}

// Make this return true when this Command no longer needs to run execute()
bool ArmPickup::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ArmPickup::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ArmPickup::Interrupted() {

}
