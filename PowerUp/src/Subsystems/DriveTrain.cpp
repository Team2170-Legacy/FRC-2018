// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveTrain.h"
#include "../RobotMap.h"
#include "../Commands/TeleopTankDrive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    talonSRXMasterLeft = RobotMap::driveTrainTalonSRXMasterLeft;
    talonSRXMasterRight = RobotMap::driveTrainTalonSRXMasterRight;
    differentialDrive1 = RobotMap::driveTrainDifferentialDrive1;
    talonSRXSlaveLeft1 = RobotMap::driveTrainTalonSRXSlaveLeft1;
    talonSRXSlaveLeft2 = RobotMap::driveTrainTalonSRXSlaveLeft2;
    talonSRXSlaveRight1 = RobotMap::driveTrainTalonSRXSlaveRight1;
    talonSRXSlaveRight2 = RobotMap::driveTrainTalonSRXSlaveRight2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    InitMotors();
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new TeleopTankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}

void DriveTrain::InitMotors() {
	//Initialize slave motors to follower mode
	talonSRXSlaveLeft1->Set(ControlMode::Follower, 1.0);
	//talonSRXSlaveLeft2->Set(ControlMode::Follower, 1.0);
	talonSRXSlaveRight1->Set(ControlMode::Follower, 2.0);
	//talonSRXSlaveRight2->Set(ControlMode::Follower, 2.0);


	talonSRXMasterLeft->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 0);
	talonSRXMasterRight->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 0);

	//Master motor direction configuration
	talonSRXMasterLeft->SetInverted(false);
	talonSRXMasterRight->SetInverted(false);
	talonSRXMasterLeft->SetSensorPhase(false);
	talonSRXMasterLeft->SetSensorPhase(false);

	//Master left and master right set control modes
	talonSRXMasterLeft->Set(ControlMode::PercentOutput, 0.0);
	talonSRXMasterRight->Set(ControlMode::PercentOutput, 0.0);




}

void DriveTrain::TankDrive(double leftSpeed, double rightSpeed) {

	differentialDrive1->TankDrive(leftSpeed, rightSpeed, true);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

