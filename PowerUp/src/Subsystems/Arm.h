// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ARM_H
#define ARM_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "ctre/Phoenix.h"
#include <cmath>
#include <Timer.h>

#define PI 3.14159265358979323
#define DEG PI/180
#define ENCODER_COUNTS_PER_REV 4096 * 3			// Native encoder counts * gearing ratio
#define ROTATION_DEG 360

/**
 *
 *
 * @author ExampleAuthor
 */
class Arm: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<frc::DigitalInput> limitSwitchFront;
	std::shared_ptr<frc::DigitalInput> limitSwitchBack;
	std::shared_ptr<frc::DigitalInput> opticalFlagSensor;
	std::shared_ptr<WPI_TalonSRX> talonSRXArmMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	bool mArmSwitchDir  = false;
	double mArmTargetPosition;
	const double kSlewSpeed;
	const double kP_w;			// Omega gain
	const double wMax;			// OLD: 5 rad/sec		NEW: 2 rad/sec
	const double Ts = 0.02;			// 50 Hz loop time
	const double MaxAngle;
	const double ArmEjectAngle = 45*DEG;
	const double ArmFloorAngle = 40*DEG;
	const double MaxCurrent;
	double setArmPosition(double alphaFinalRad);

public:
	Arm();
	void InitDefaultCommand() override;
	void Periodic() override;

	bool readLimitSwitchFront();
	bool readLimitSwitchBack();

	int readArmEncoder();
	void resetArmEncoder();

	double getArmPosition();

	bool readArmOpticalFlagSensor();

	void stopArmMotor();
	void setArmMotorSpeed(double speed);

	void activateSolenoid(bool onOff);

	double getArmMotorTemp();

	void setArmTargetPosition(double value);
	bool isAtPosition(double positionRad);
	bool isAtPosition();
	void setArmSwitchDir(bool value);
	bool getArmSwitchDir();

	double getArmEjectAngle();
	double getArmFloorAngle();

	void SlewArmPos(void);
	void SlewArmNeg(void);
	void SlewArmHold(void);
	void SlewArm(double slew);

	double encoderCountsToDeg(int encoderCounts);
	double degToEncoderCounts(double degrees);
	double RadSecToNativeUnits(double nativeValue);

	void setMotorControl(int mode, double value);
	double getArmMotorVelocity();
	double NativeUnitsToRadSec(double nativeUnits);
	void testMode(int Idx);

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
