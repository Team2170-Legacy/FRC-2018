// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::armleftIntakeMotor;
std::shared_ptr<WPI_TalonSRX> RobotMap::armrightIntakeMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::armIntakeOuttake;
std::shared_ptr<WPI_TalonSRX> RobotMap::armarmMotor;
std::shared_ptr<frc::Encoder> RobotMap::armarmEncoder;
std::shared_ptr<frc::DigitalInput> RobotMap::armarmLimitSwitchFront;
std::shared_ptr<frc::DigitalInput> RobotMap::armarmLimitSwitchBack;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::armarmSolenoid;
std::shared_ptr<frc::DigitalInput> RobotMap::armarmOpticalFlagSensor;
std::shared_ptr<frc::Compressor> RobotMap::armarmCompressor;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::rampssolenoidLeft;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::rampssolenoidRight;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainmotorLeftFront;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainmotorLeftMiddle;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainmotorLeftRear;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainmotorRightMiddle;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainmotorRightFront;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainmotorRightRear;
std::shared_ptr<frc::Encoder> RobotMap::driveTrainmotorLeftEncoder;
std::shared_ptr<frc::Encoder> RobotMap::driveTrainmotorRightEncoder;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    armleftIntakeMotor.reset(new WPI_TalonSRX(1));
    
    
    armrightIntakeMotor.reset(new WPI_TalonSRX(2));
    
    
    armIntakeOuttake = std::make_shared<frc::SpeedControllerGroup>(*armleftIntakeMotor, *armrightIntakeMotor  );
    lw->AddActuator("Arm", "IntakeOuttake", armIntakeOuttake);
    
    armarmMotor.reset(new WPI_TalonSRX(0));
    
    
    armarmEncoder.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    lw->AddSensor("Arm", "armEncoder", armarmEncoder);
    armarmEncoder->SetDistancePerPulse(1.0);
    armarmEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    armarmLimitSwitchFront.reset(new frc::DigitalInput(2));
    lw->AddSensor("Arm", "armLimitSwitchFront", armarmLimitSwitchFront);
    
    armarmLimitSwitchBack.reset(new frc::DigitalInput(3));
    lw->AddSensor("Arm", "armLimitSwitchBack", armarmLimitSwitchBack);
    
    armarmSolenoid.reset(new frc::DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Arm", "armSolenoid", armarmSolenoid);
    
    armarmOpticalFlagSensor.reset(new frc::DigitalInput(4));
    lw->AddSensor("Arm", "armOpticalFlagSensor", armarmOpticalFlagSensor);
    
    armarmCompressor.reset(new frc::Compressor(0));
    lw->AddActuator("Arm", "armCompressor", armarmCompressor);
    
    rampssolenoidLeft.reset(new frc::DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Ramps", "solenoidLeft", rampssolenoidLeft);
    
    rampssolenoidRight.reset(new frc::DoubleSolenoid(0, 4, 5));
    lw->AddActuator("Ramps", "solenoidRight", rampssolenoidRight);
    
    driveTrainmotorLeftFront.reset(new WPI_TalonSRX(3));
    
    
    driveTrainmotorLeftMiddle.reset(new WPI_TalonSRX(4));
    
    
    driveTrainmotorLeftRear.reset(new WPI_TalonSRX(5));
    
    
    driveTrainmotorRightMiddle.reset(new WPI_TalonSRX(7));
    
    
    driveTrainmotorRightFront.reset(new WPI_TalonSRX(6));
    
    
    driveTrainmotorRightRear.reset(new WPI_TalonSRX(8));
    
    
    driveTrainmotorLeftEncoder.reset(new frc::Encoder(5, 6, false, frc::Encoder::k4X));
    lw->AddSensor("DriveTrain", "motorLeftEncoder", driveTrainmotorLeftEncoder);
    driveTrainmotorLeftEncoder->SetDistancePerPulse(1.0);
    driveTrainmotorLeftEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    driveTrainmotorRightEncoder.reset(new frc::Encoder(7, 8, false, frc::Encoder::k4X));
    lw->AddSensor("DriveTrain", "motorRightEncoder", driveTrainmotorRightEncoder);
    driveTrainmotorRightEncoder->SetDistancePerPulse(1.0);
    driveTrainmotorRightEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
